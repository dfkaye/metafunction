{
  "name": "vm-shim",
  "version": "0.0.2",
  "description": "browser shim for vm#runInContext methods",
  "homepage": "https://github.com/dfkaye/vm-shim",
  "author": {
    "name": "david kaye",
    "email": "dfkaye@yahoo.com",
    "url": "@dfkaye"
  },
  "devDependencies": {
    "jasmine-node": "~1.0.0"
  },
  "license": "MIT",
  "main": "./vm-shim.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/dfkaye/vm-shim.git"
  },
  "scripts": {
    "test": "jasmine-node --verbose ./test/node-suite.spec.js",
    "test-vm": "jasmine-node --verbose ./test/vm-shim.spec.js"
  },
  "readme": "vm-shim\r\n=======\r\n\r\nThis began as a wan attempt to reproduce/polyfill/infill the Node.JS \r\n`vm#runIn<Some?>Context()` methods in browsers. It has transformed \r\ninto the present tan muscular self-assured and smiling project before you.\r\n\r\nI'd wanted to show that shimming `vm` in the browser really could be done \r\ndirectly, partly to avoid iframes (which \r\n[vm-browserify](https://github.com/substack/vm-browserify) uses) to create and \r\nclone globals and contexts, and partly to side-step Node.js's \r\n*contra-normative* implementations of `runInContext` methods.\r\n\r\nIt's actually a \"why didn't I think of that?\" solution to problems such as -\r\n\r\n+ why don't `vm` methods accept *functions* as arguments, not just strings?\r\n+ why don't `eval()` and `Function()` accept *functions* as arguments?\r\n+ why do `eval()` and `Function()` leak un-var'd symbols to the global scope, in \r\n    browser & node.js environments?\r\n+ how can we inspect items defined in closures?\r\n+ how can we override (or mock) them?\r\n\r\n\r\nmethods provided (so far)\r\n----------------\r\n\r\n+ `vm#runInContext(code, context)`\r\n+ `vm#runInNewContext(code, context)`\r\n+ `vm#runInThisContext(code)`\r\n\r\nnot provided (yet)\r\n------------\r\n\r\n+ `vm#.createContext`\r\n+ `vm#.createScript`\r\n+ `script.runInThisContext()`\r\n+ `script.runInNewContext([sandbox])`\r\n\r\n\r\nnode tests\r\n----------\r\n\r\nUsing Misko Hevery's [jasmine-node](https://github.com/mhevery/jasmine-node) to \r\nrun command line tests on node (even though this project initially aimed at a \r\nbrowser shim).\r\n\r\nThe `package.json` file defines three test script commands to run the tests via \r\njasmine-node without the browsers:\r\n\r\n    npm test \r\n    # => jasmine-node --verbose ./test/suite.spec.js\r\n\r\n    npm run test-vm \r\n    # => jasmine-node --verbose ./test/vm-shim.spec.js\r\n\r\n\r\nbrowser tests\r\n-------------\r\n\r\nUsing @pivotallabs' \r\n<a href='http://jasmine.github.io/2.0/introduction.html'>jasmine-2.0.0</a> for \r\nthe browser suite.\r\n\r\n__The *jasmine2* browser test page is viewable on \r\n<a href='//rawgithub.com/dfkaye/vm-shim/master/test/browser-suite.html' \r\n   target='_new' title='opens in new tab or window'>rawgithub</a>.__\r\n  \r\nUsing Toby Ho's MAGNIFICENT [testemjs](https://github.com/airportyh/testem) to \r\ndrive tests in multiple browsers for jasmine-2.0.0 (see how to \r\n[hack testem for jasmine 2](https://github.com/dfkaye/testem-jasmine2)), as well \r\nas jasmine-node.  The `testem.json` file uses the standalone test page above, \r\nand also uses a custom launcher for jasmine-node (v 1.3.1).\r\n\r\nView both test types at the console by running:\r\n\r\n    testem -l j\r\n  \r\n\r\nimplementation\r\n--------------\r\n\r\nStarting with `vm.runInContext(code, context)`, the `Function()` constructor is \r\nat the core.  The *code* param may be either a string __or a function__.  The \r\n*context* param is a simple object with key-value mappings.  For any key on the \r\ncontext, a new *var* for that key is prefixed to the code.  The code is passed \r\nin to `Function()` so that the keynames can't leak outside the new function's \r\nscope.\r\n\r\nRefactored [8 Nov 2013]: a lot of little things involved - biggest is that \r\n`runInThisContext` now uses `eval()` internally, and the other two use `with()` \r\ninside of `Function()`.  Who says you can't use `with()`?\r\n\r\n[10 Nov] Having discovered that eval() leaks globals (!?!) if symbols are not \r\nvar'd, all methods rely on a helper method to scrape EVERY global added by its \r\ninternal `eval()` (or `Function()`) call.  \r\n\r\n\r\nexample tests\r\n-------------\r\n\r\nThe unit tests demonstrate how `runInContext` and `runInNewContext` methods work \r\nby passing a `context` param containing a reference to the test's expectation \r\nobject or function.\r\n\r\nExample runInContext test passes the `expect` function via context argument:\r\n    \r\n    it(\"overrides external scope vars with context attrs\", function() {\r\n\r\n      var attr = \"shouldn't see this\";\r\n      \r\n      var context = {\r\n        attr: 'ok', \r\n        expect: expect  // <-- pass expect here\r\n      };\r\n      \r\n      vm.runInContext(function(){\r\n        expect(attr).toBe('ok');\r\n        expect(attr).not.toBe('should not see this');\r\n      }, context); \r\n      \r\n    });\r\n\r\nExample runInNewContext test to verify context is returned:\r\n\r\n    it('should return context object', function () {\r\n      var context = { name: 'test' };\r\n      \r\n      var result = vm.runInNewContext('', context);\r\n      \r\n      expect(result).toBe(context);\r\n      expect(result.name).toBe('test');\r\n    });\r\n    \r\nExample runInThisContext test to verify accidental is not placed on global scope:\r\n    \r\n    it(\"should not leak accidental (un-var'd) globals\", function() {\r\n    \r\n      vm.runInThisContext(function(){\r\n        accidental = 'defined';\r\n      });\r\n      \r\n      expect(global.accidental).not.toBeDefined();\r\n    });\r\n\r\n    \r\nhistory\r\n-------------\r\nJust noting for the record:\r\n\r\n+ Original idea emerged late at night 17 SEPT 2013 \r\n+ First implemented with rawgithub approach 18 SEPT, \r\n+ Full success including objects as properties of the context argument 19 SEPT.\r\n+ Breaking the usual TDD procedure:\r\n  + Started with console statements and prayer ~ removed both for real unit tests\r\n  + Tape tests added 20 SEPT.\r\n  + Jasmine tests/page added 20 SEPT.\r\n+ Error, and leakage tests added 21 SEPT.\r\n+ runInNewContext, runInThisContext methods added; runInContext refactored 4 OCT 2013\r\n+ CoffeeScript test with jasmine-node added 6 OCT\r\n+ tape test written in CoffeeScript test added 7 OCT\r\n+ scope injection tests started 21 OCT\r\n+ scope injection: spec started, tests updated, testem.json added 6 NOV 2013\r\n+ massive refactoring 8 NOV 2013\r\n  - certain cases were just wrong (needed 'eval()' for 'runInThisContext()', e.g.)\r\n  - new/completed bdd specs for both vm-shim and scope mocking (temp name is 'mockScope')\r\n+ last global leakage fixed 10 NOV\r\n+ deleted CoffeeScript and tape tests (fun but extra work for now) 11 NOV\r\n+ rawgithub-viewable test page that also works with testem 12 NOV\r\n+ moved mock scope stuff to metafunction project 18 NOV",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dfkaye/vm-shim/issues"
  },
  "_id": "vm-shim@0.0.2",
  "_from": "vm-shim@~0.0.0"
}
